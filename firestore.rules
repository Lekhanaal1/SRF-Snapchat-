rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/adminUsers/$(request.auth.uid)).data.role == 'admin';
    }

    function isValidParticipant() {
      let data = request.resource.data;
      let requiredFields = ['name', 'email', 'center', 'status', 'createdAt', 'updatedAt'];
      let stringFields = ['name', 'email', 'center'];
      let timestampFields = ['createdAt', 'updatedAt'];
      
      // Check required fields
      if (!data.keys().hasAll(requiredFields)) {
        return false;
      }
      
      // Validate string fields
      for (let field in stringFields) {
        if (!(data[field] is string) || data[field].size() == 0) {
          return false;
        }
      }
      
      // Validate email format
      if (!data.email.matches('^[^@]+@[^@]+\\.[^@]+$')) {
        return false;
      }
      
      // Validate status
      if (!(data.status in ['pending', 'approved', 'rejected', 'registered'])) {
        return false;
      }
      
      // Validate timestamps
      for (let field in timestampFields) {
        if (!(data[field] is timestamp)) {
          return false;
        }
      }
      
      // Validate location if present
      if ('location' in data) {
        if (!(data.location is map) ||
            !('coordinates' in data.location) ||
            !(data.location.coordinates is list) ||
            data.location.coordinates.size() != 2) {
          return false;
        }
      }
      
      // Validate profile picture if present
      if ('profilePicture' in data) {
        if (!(data.profilePicture is string) ||
            !data.profilePicture.matches('^https://firebasestorage\\.googleapis\\.com/.*$')) {
          return false;
        }
      }
      
      return true;
    }

    function isValidRegistration() {
      let data = request.resource.data;
      let requiredFields = ['name', 'email', 'center', 'location', 'status', 'createdAt', 'updatedAt'];
      
      if (!isValidParticipant()) {
        return false;
      }
      
      // Additional registration-specific validations
      if (!data.keys().hasAll(requiredFields)) {
        return false;
      }
      
      if (!(data.location is map) ||
          !('coordinates' in data.location) ||
          !(data.location.coordinates is list) ||
          data.location.coordinates.size() != 2) {
        return false;
      }
      
      if (!(data.status in ['registered', 'approved'])) {
        return false;
      }
      
      return true;
    }

    function isWithinRateLimit() {
      return request.time > resource.data.lastUpdate + duration.value(1, 'h');
    }

    // Participants collection
    match /participants/{participantId} {
      // Anyone can read participant data for the global map
      allow read: if true;
      
      // Only admins can create new participants
      allow create: if isAdmin() && isValidParticipant();
      
      // Only admins can update participant data
      allow update: if isAdmin() && 
        isValidParticipant() && 
        isWithinRateLimit();
      
      // Only admins can delete participants
      allow delete: if isAdmin();
    }

    // Admin users collection
    match /adminUsers/{userId} {
      // Users can read their own admin data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only admins can write to admin users
      allow write: if isAdmin();
    }

    // Center statistics collection
    match /centerStats/{centerId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Deny access to all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 