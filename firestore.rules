rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/adminUsers/$(request.auth.uid)).data.role == 'admin';
    }

    function isValidParticipant() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'email', 'center', 'status', 'createdAt', 'updatedAt']) &&
             data.name is string && data.name.size() > 0 &&
             data.email is string && data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
             data.center is string && data.center.size() > 0 &&
             data.status in ['pending', 'approved', 'rejected', 'registered'] &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (!('location' in data) || (data.location is map && data.location.coordinates is list && data.location.coordinates.size() == 2)) &&
             (!('profilePicture' in data) || (data.profilePicture is string && data.profilePicture.matches('^https://firebasestorage\\.googleapis\\.com/.*$')));
    }

    // Participants collection
    match /participants/{participantId} {
      // Anyone can read participant data for the global map
      allow read: if true;
      
      // Admin actions: full control over participant documents
      allow create: if isAdmin() && isValidParticipant();
      allow delete: if isAdmin();
      allow update: if isAdmin() && isValidParticipant();

      // Participant self-registration update:
      // A non-admin user (the participant) can update their *own* document
      // specifically for registration purposes, setting status to 'registered'
      // and adding location, registeredAt, registeredBy. It also ensures they
      // are not modifying other critical fields that only an admin should change.
      allow update: if request.auth.uid == participantId &&
                        request.resource.data.status == 'registered' &&
                        request.resource.data.location is map &&
                        request.resource.data.location.coordinates is list &&
                        request.resource.data.location.coordinates.size() == 2 &&
                        request.resource.data.registeredAt is timestamp &&
                        request.resource.data.registeredBy == request.auth.uid &&
                        // Ensure only these specific fields are being modified by the participant
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'location', 'registeredAt', 'registeredBy']);
    }

    // Admin users collection
    match /adminUsers/{userId} {
      // Users can read their own admin data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only admins can write to admin users
      allow write: if isAdmin();
    }

    // Center statistics collection
    match /centerStats/{centerId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Centers collection (new rule for public read access)
    match /centers/{centerId} {
      allow read: if true;
    }

    // Deny access to all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 