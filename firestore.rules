rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/adminUsers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/adminUsers/$(request.auth.uid)).data.role == 'admin';
    }

    function isValidParticipant() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'email', 'center', 'status', 'createdAt', 'updatedAt']) &&
        data.name is string && data.name.size() > 0 &&
        data.email is string && data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        data.center is string && data.center.size() > 0 &&
        data.status in ['pending', 'approved', 'rejected', 'registered'] &&
        data.createdAt is timestamp &&
        data.updatedAt is timestamp;
    }

    function isValidRegistration() {
      let data = request.resource.data;
      return data.keys().hasAll(['name', 'email', 'center', 'location', 'status', 'createdAt', 'updatedAt']) &&
        data.name is string && data.name.size() > 0 &&
        data.email is string && data.email.matches('^[^@]+@[^@]+\\.[^@]+$') &&
        data.center is string && data.center.size() > 0 &&
        data.location is map &&
        data.location.coordinates is list && data.location.coordinates.size() == 2 &&
        data.status in ['registered', 'approved'] &&
        data.createdAt is timestamp &&
        data.updatedAt is timestamp;
    }

    // Participants collection
    match /participants/{participantId} {
      // Anyone can read participant data for the global map
      allow read: if true;
      
      // Only admins can create new participants
      allow create: if isAdmin() && isValidParticipant();
      
      // Only admins can update participant data
      allow update: if isAdmin() && isValidParticipant();
      
      // Only admins can delete participants
      allow delete: if isAdmin();
    }

    // Admin users collection
    match /adminUsers/{userId} {
      // Users can read their own admin data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only admins can write to admin users
      allow write: if isAdmin();
    }

    // Deny access to all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 